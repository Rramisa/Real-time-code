{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Wrapper from './wrapper';\nimport { parseSize, setGroupedTimeout, calculateBorderRadius, getNullableText } from '../utils';\nexport default class AvatarText extends React.PureComponent {\n  constructor() {\n    var _this;\n    super(...arguments);\n    _this = this;\n    _defineProperty(this, \"_scaleTextNode\", function (node) {\n      let retryTTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n      const {\n        unstyled,\n        textSizeRatio,\n        textMarginRatio,\n        avatar\n      } = _this.props;\n      _this._node = node;\n      if (!node || !node.parentNode || unstyled || avatar.src || !_this._mounted) return;\n      const spanNode = node.parentNode;\n      const tableNode = spanNode.parentNode;\n      const {\n        width: containerWidth,\n        height: containerHeight\n      } = spanNode.getBoundingClientRect();\n\n      // Whenever the avatar element is not visible due to some CSS\n      // (such as display: none) on any parent component we will check\n      // whether the component has become visible.\n      //\n      // The time between checks grows up to half a second in an attempt\n      // to reduce flicker / performance issues.\n      if (containerWidth == 0 && containerHeight == 0) {\n        const ttl = Math.min(retryTTL * 1.5, 500);\n        setGroupedTimeout(() => _this._scaleTextNode(node, ttl), ttl);\n        return;\n      }\n\n      // If the tableNode (outer-container) does not have its fontSize set yet,\n      // we'll set it according to \"textSizeRatio\"\n      if (!tableNode.style.fontSize) {\n        const baseFontSize = containerHeight / textSizeRatio;\n        tableNode.style.fontSize = \"\".concat(baseFontSize, \"px\");\n      }\n\n      // Reset font-size such that scaling works correctly (#133)\n      spanNode.style.fontSize = null;\n\n      // Measure the actual width of the text after setting the container size\n      const {\n        width: textWidth\n      } = node.getBoundingClientRect();\n      if (textWidth < 0) return;\n\n      // Calculate the maximum width for the text based on \"textMarginRatio\"\n      const maxTextWidth = containerWidth * (1 - 2 * textMarginRatio);\n\n      // If the text is too wide, scale it down by (maxWidth / actualWidth)\n      if (textWidth > maxTextWidth) spanNode.style.fontSize = \"calc(1em * \".concat(maxTextWidth / textWidth, \")\");\n    });\n  }\n  componentDidMount() {\n    this._mounted = true;\n    this._scaleTextNode(this._node);\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  render() {\n    const {\n      className,\n      round,\n      unstyled,\n      title,\n      name,\n      value,\n      avatar\n    } = this.props;\n    const size = parseSize(this.props.size);\n    const initialsStyle = unstyled ? null : {\n      width: size.str,\n      height: size.str,\n      lineHeight: 'initial',\n      textAlign: 'center',\n      color: this.props.fgColor,\n      background: avatar.color,\n      borderRadius: calculateBorderRadius(round)\n    };\n    const tableStyle = unstyled ? null : {\n      display: 'table',\n      tableLayout: 'fixed',\n      width: '100%',\n      height: '100%'\n    };\n    const spanStyle = unstyled ? null : {\n      display: 'table-cell',\n      verticalAlign: 'middle',\n      fontSize: '100%',\n      whiteSpace: 'nowrap'\n    };\n\n    // Ensure the text node is updated and scaled when any of these\n    // values changed by calling the `_scaleTextNode` method using\n    // the correct `ref`.\n    const key = [avatar.value, this.props.size].join('');\n    return /*#__PURE__*/React.createElement(Wrapper, this.props, /*#__PURE__*/React.createElement(\"div\", {\n      className: className + ' sb-avatar__text',\n      style: initialsStyle,\n      title: getNullableText(title, name || value)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: tableStyle\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: spanStyle\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      ref: this._scaleTextNode,\n      key: key\n    }, avatar.value)))));\n  }\n}\n_defineProperty(AvatarText, \"propTypes\", {\n  name: PropTypes.string,\n  value: PropTypes.string,\n  avatar: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  className: PropTypes.string,\n  unstyled: PropTypes.bool,\n  fgColor: PropTypes.string,\n  textSizeRatio: PropTypes.number,\n  textMarginRatio: PropTypes.number,\n  round: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n});\n_defineProperty(AvatarText, \"defaultProps\", {\n  className: '',\n  fgColor: '#FFF',\n  round: false,\n  size: 100,\n  textSizeRatio: 3,\n  textMarginRatio: .15,\n  unstyled: false\n});","map":{"version":3,"names":["_defineProperty","React","PropTypes","Wrapper","parseSize","setGroupedTimeout","calculateBorderRadius","getNullableText","AvatarText","PureComponent","constructor","_this","arguments","node","retryTTL","length","undefined","unstyled","textSizeRatio","textMarginRatio","avatar","props","_node","parentNode","src","_mounted","spanNode","tableNode","width","containerWidth","height","containerHeight","getBoundingClientRect","ttl","Math","min","_scaleTextNode","style","fontSize","baseFontSize","concat","textWidth","maxTextWidth","componentDidMount","componentWillUnmount","render","className","round","title","name","value","size","initialsStyle","str","lineHeight","textAlign","color","fgColor","background","borderRadius","tableStyle","display","tableLayout","spanStyle","verticalAlign","whiteSpace","key","join","createElement","ref","string","object","oneOfType","bool","number"],"sources":["/Users/sumonta/Downloads/CSE471_Group8-main/frontend/node_modules/react-avatar/es/components/text.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Wrapper from './wrapper';\nimport { parseSize, setGroupedTimeout, calculateBorderRadius, getNullableText } from '../utils';\nexport default class AvatarText extends React.PureComponent {\n  constructor() {\n    var _this;\n    super(...arguments);\n    _this = this;\n    _defineProperty(this, \"_scaleTextNode\", function (node) {\n      let retryTTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n      const {\n        unstyled,\n        textSizeRatio,\n        textMarginRatio,\n        avatar\n      } = _this.props;\n      _this._node = node;\n      if (!node || !node.parentNode || unstyled || avatar.src || !_this._mounted) return;\n      const spanNode = node.parentNode;\n      const tableNode = spanNode.parentNode;\n      const {\n        width: containerWidth,\n        height: containerHeight\n      } = spanNode.getBoundingClientRect();\n\n      // Whenever the avatar element is not visible due to some CSS\n      // (such as display: none) on any parent component we will check\n      // whether the component has become visible.\n      //\n      // The time between checks grows up to half a second in an attempt\n      // to reduce flicker / performance issues.\n      if (containerWidth == 0 && containerHeight == 0) {\n        const ttl = Math.min(retryTTL * 1.5, 500);\n        setGroupedTimeout(() => _this._scaleTextNode(node, ttl), ttl);\n        return;\n      }\n\n      // If the tableNode (outer-container) does not have its fontSize set yet,\n      // we'll set it according to \"textSizeRatio\"\n      if (!tableNode.style.fontSize) {\n        const baseFontSize = containerHeight / textSizeRatio;\n        tableNode.style.fontSize = \"\".concat(baseFontSize, \"px\");\n      }\n\n      // Reset font-size such that scaling works correctly (#133)\n      spanNode.style.fontSize = null;\n\n      // Measure the actual width of the text after setting the container size\n      const {\n        width: textWidth\n      } = node.getBoundingClientRect();\n      if (textWidth < 0) return;\n\n      // Calculate the maximum width for the text based on \"textMarginRatio\"\n      const maxTextWidth = containerWidth * (1 - 2 * textMarginRatio);\n\n      // If the text is too wide, scale it down by (maxWidth / actualWidth)\n      if (textWidth > maxTextWidth) spanNode.style.fontSize = \"calc(1em * \".concat(maxTextWidth / textWidth, \")\");\n    });\n  }\n  componentDidMount() {\n    this._mounted = true;\n    this._scaleTextNode(this._node);\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  render() {\n    const {\n      className,\n      round,\n      unstyled,\n      title,\n      name,\n      value,\n      avatar\n    } = this.props;\n    const size = parseSize(this.props.size);\n    const initialsStyle = unstyled ? null : {\n      width: size.str,\n      height: size.str,\n      lineHeight: 'initial',\n      textAlign: 'center',\n      color: this.props.fgColor,\n      background: avatar.color,\n      borderRadius: calculateBorderRadius(round)\n    };\n    const tableStyle = unstyled ? null : {\n      display: 'table',\n      tableLayout: 'fixed',\n      width: '100%',\n      height: '100%'\n    };\n    const spanStyle = unstyled ? null : {\n      display: 'table-cell',\n      verticalAlign: 'middle',\n      fontSize: '100%',\n      whiteSpace: 'nowrap'\n    };\n\n    // Ensure the text node is updated and scaled when any of these\n    // values changed by calling the `_scaleTextNode` method using\n    // the correct `ref`.\n    const key = [avatar.value, this.props.size].join('');\n    return /*#__PURE__*/React.createElement(Wrapper, this.props, /*#__PURE__*/React.createElement(\"div\", {\n      className: className + ' sb-avatar__text',\n      style: initialsStyle,\n      title: getNullableText(title, name || value)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: tableStyle\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: spanStyle\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      ref: this._scaleTextNode,\n      key: key\n    }, avatar.value)))));\n  }\n}\n_defineProperty(AvatarText, \"propTypes\", {\n  name: PropTypes.string,\n  value: PropTypes.string,\n  avatar: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  className: PropTypes.string,\n  unstyled: PropTypes.bool,\n  fgColor: PropTypes.string,\n  textSizeRatio: PropTypes.number,\n  textMarginRatio: PropTypes.number,\n  round: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n});\n_defineProperty(AvatarText, \"defaultProps\", {\n  className: '',\n  fgColor: '#FFF',\n  round: false,\n  size: 100,\n  textSizeRatio: 3,\n  textMarginRatio: .15,\n  unstyled: false\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}