{"ast":null,"code":"var _jsxFileName = \"/Users/sumonta/Downloads/CSE471_Group8-main/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  useEffect(() => {\n    if (token) {\n      // Verify token and get user data\n      fetchUserProfile();\n    } else {\n      setLoading(false);\n    }\n  }, [token]);\n  const fetchUserProfile = async () => {\n    try {\n      const response = await fetch('http://localhost:5001/api/user/profile', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n      } else {\n        // Token is invalid, remove it\n        localStorage.removeItem('token');\n        setToken(null);\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      localStorage.removeItem('token');\n      setToken(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('token', data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return {\n          success: true,\n          data\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const register = async (username, email, password, hometown, favoriteAnimal, dateOfBirth) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          email,\n          password,\n          hometown,\n          favoriteAnimal,\n          dateOfBirth\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Don't automatically log in the user after registration\n        // Just return success without setting token/user\n        return {\n          success: true,\n          data\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const resetPassword = async email => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          data\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const verifySecurityQuestions = async (email, hometown, favoriteAnimal, dateOfBirth) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/verify-security-questions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          hometown,\n          favoriteAnimal,\n          dateOfBirth\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          data\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const resetPasswordConfirm = async (resetToken, newPassword) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/reset-password-confirm', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          resetToken,\n          newPassword\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          data\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n  const updateProfile = async profileData => {\n    try {\n      const response = await fetch('http://localhost:5001/api/user/profile', {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          profile: profileData\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUser(data.user);\n        return {\n          success: true,\n          data\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    resetPassword,\n    verifySecurityQuestions,\n    resetPasswordConfirm,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"/pbUqy0QsBvMqKPYubk3+KKKH8I=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","fetchUserProfile","response","fetch","headers","ok","data","json","removeItem","error","console","login","email","password","method","body","JSON","stringify","setItem","success","message","register","username","hometown","favoriteAnimal","dateOfBirth","resetPassword","verifySecurityQuestions","resetPasswordConfirm","resetToken","newPassword","logout","updateProfile","profileData","profile","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sumonta/Downloads/CSE471_Group8-main/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  useEffect(() => {\n    if (token) {\n      // Verify token and get user data\n      fetchUserProfile();\n    } else {\n      setLoading(false);\n    }\n  }, [token]);\n\n  const fetchUserProfile = async () => {\n    try {\n      const response = await fetch('http://localhost:5001/api/user/profile', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n      } else {\n        // Token is invalid, remove it\n        localStorage.removeItem('token');\n        setToken(null);\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      localStorage.removeItem('token');\n      setToken(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email, password })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem('token', data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return { success: true, data };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      return { success: false, message: 'Network error' };\n    }\n  };\n\n  const register = async (username, email, password, hometown, favoriteAnimal, dateOfBirth) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ username, email, password, hometown, favoriteAnimal, dateOfBirth })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        // Don't automatically log in the user after registration\n        // Just return success without setting token/user\n        return { success: true, data };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      return { success: false, message: 'Network error' };\n    }\n  };\n\n  const resetPassword = async (email) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return { success: true, data };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      return { success: false, message: 'Network error' };\n    }\n  };\n\n  const verifySecurityQuestions = async (email, hometown, favoriteAnimal, dateOfBirth) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/verify-security-questions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email, hometown, favoriteAnimal, dateOfBirth })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return { success: true, data };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      return { success: false, message: 'Network error' };\n    }\n  };\n\n  const resetPasswordConfirm = async (resetToken, newPassword) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/reset-password-confirm', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ resetToken, newPassword })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return { success: true, data };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      return { success: false, message: 'Network error' };\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n\n  const updateProfile = async (profileData) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/user/profile', {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ profile: profileData })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUser(data.user);\n        return { success: true, data };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      return { success: false, message: 'Network error' };\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    resetPassword,\n    verifySecurityQuestions,\n    resetPasswordConfirm,\n    updateProfile\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}